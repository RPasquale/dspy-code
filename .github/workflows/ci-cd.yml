name: DSPy Agent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code Quality and Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install -e .
        uv pip install pytest pytest-html pytest-xdist pytest-cov black flake8 mypy
    
    - name: Lint with flake8
      run: |
        flake8 dspy_agent/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 dspy_agent/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy dspy_agent/ --ignore-missing-imports --no-strict-optional
    
    - name: Format check with black
      run: |
        black --check dspy_agent/
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short --maxfail=5 \
          --junitxml=test-results/unit-tests.xml \
          --html=test-results/unit-tests.html \
          --self-contained-html \
          --cov=dspy_agent \
          --cov-report=xml:test-results/coverage.xml \
          --cov-report=html:test-results/coverage-html
    
    - name: Run comprehensive tests
      run: |
        pytest tests/test_comprehensive_agent.py -v \
          --junitxml=test-results/comprehensive-tests.xml \
          --html=test-results/comprehensive-tests.html \
          --self-contained-html
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.python-version == '3.11'
      with:
        file: test-results/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Docker Build and Test
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build lightweight image
      run: |
        cd docker/lightweight
        docker build -t dspy-lightweight:latest .
    
    - name: Build embed worker image
      run: |
        cd docker/lightweight
        docker build -f embed_worker.Dockerfile -t dspy-embed-worker:latest ../..
    
    - name: Test Docker images
      run: |
        docker run --rm dspy-lightweight:latest --help
        docker run --rm dspy-embed-worker:latest --help
    
    - name: Test Docker Compose
      run: |
        cd docker/lightweight
        docker-compose config
        docker-compose up -d --remove-orphans
        sleep 30
        docker-compose ps
        docker-compose down

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, docker]
    
    services:
      kafka:
        image: bitnami/kafka:3.6
        ports:
          - 9092:9092
        env:
          KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
          ALLOW_PLAINTEXT_LISTENER: "yes"
          KAFKA_LISTENERS: PLAINTEXT://:9092
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      zookeeper:
        image: bitnami/zookeeper:3.9
        ports:
          - 2181:2181
        env:
          ALLOW_ANONYMOUS_LOGIN: "yes"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install -e .
        uv pip install pytest pytest-asyncio
    
    - name: Wait for services
      run: |
        sleep 30
        # Test Kafka connectivity
        timeout 60 bash -c 'until docker exec $(docker ps -q --filter "ancestor=bitnami/kafka:3.6") /opt/bitnami/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        pytest tests/test_comprehensive_agent.py::TestAgentComprehensive::test_streaming_runtime -v
        pytest tests/test_comprehensive_agent.py::TestAgentComprehensive::test_agent_integration_workflow -v

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install -e .
        uv pip install pytest pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/test_comprehensive_agent.py::TestAgentComprehensive::test_performance_metrics -v --benchmark-only

  # Build and Publish Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, docker, integration]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.event_name == 'release')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Publish to PyPI
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, docker, integration]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to development
      run: |
        echo "Deploying to development environment..."
        # Add deployment logic here
        # This could include:
        # - Deploying to AWS/GCP/Azure
        # - Updating Docker images in registry
        # - Triggering deployment scripts

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker, integration, security]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment logic here

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, docker, integration, build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.docker.result == 'success' && needs.integration.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
    
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.docker.result == 'failure' || needs.integration.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Please check the logs."
        exit 1
