apiVersion: apps/v1
kind: Deployment
metadata:
  name: vllm-server
  namespace: {{ .Values.namespace }}
  labels:
    app: vllm-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vllm-server
  template:
    metadata:
      labels:
        app: vllm-server
    spec:
      nodeSelector:
        nvidia.com/gpu.present: "true"
      containers:
        - name: vllm
          image: {{ .Values.image.vllm }}
          imagePullPolicy: IfNotPresent
          args:
            - "--model"
            - "{{ .Values.vllm.model }}"
            - "--dtype"
            - "{{ .Values.vllm.dtype }}"
            - "--tensor-parallel-size"
            - "{{ .Values.vllm.tensorParallel }}"
            - "--max-num-seqs"
            - "{{ .Values.vllm.maxNumSeqs }}"
            - "--port"
            - "{{ .Values.vllm.port }}"
          ports:
            - name: http
              containerPort: {{ .Values.vllm.port }}
          resources:
            limits:
              nvidia.com/gpu: {{ .Values.vllm.resources.limits.gpu }}
              cpu: {{ .Values.vllm.resources.limits.cpu | quote }}
              memory: {{ .Values.vllm.resources.limits.memory | quote }}
            requests:
              cpu: {{ .Values.vllm.resources.requests.cpu | quote }}
              memory: {{ .Values.vllm.resources.requests.memory | quote }}
          env:
            - name: VLLM_WORKER_MULTIPROC_METHOD
              value: spawn
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
