# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from env_manager import v1_pb2 as env__manager_dot_v1__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in env_manager.v1_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EnvManagerServiceStub(object):
    """Environment Manager service for container lifecycle management
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartServices = channel.unary_stream(
                '/env_manager.v1.EnvManagerService/StartServices',
                request_serializer=env__manager_dot_v1__pb2.StartServicesRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.ServiceStatusUpdate.FromString,
                _registered_method=True)
        self.StopServices = channel.unary_unary(
                '/env_manager.v1.EnvManagerService/StopServices',
                request_serializer=env__manager_dot_v1__pb2.StopServicesRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.StopServicesResponse.FromString,
                _registered_method=True)
        self.RestartService = channel.unary_unary(
                '/env_manager.v1.EnvManagerService/RestartService',
                request_serializer=env__manager_dot_v1__pb2.RestartServiceRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.RestartServiceResponse.FromString,
                _registered_method=True)
        self.GetServicesStatus = channel.unary_unary(
                '/env_manager.v1.EnvManagerService/GetServicesStatus',
                request_serializer=env__manager_dot_v1__pb2.GetServicesStatusRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.ServicesStatusResponse.FromString,
                _registered_method=True)
        self.StreamHealth = channel.unary_stream(
                '/env_manager.v1.EnvManagerService/StreamHealth',
                request_serializer=env__manager_dot_v1__pb2.StreamHealthRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.HealthUpdate.FromString,
                _registered_method=True)
        self.GetResourceAvailability = channel.unary_unary(
                '/env_manager.v1.EnvManagerService/GetResourceAvailability',
                request_serializer=env__manager_dot_v1__pb2.GetResourceAvailabilityRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.ResourceAvailabilityResponse.FromString,
                _registered_method=True)
        self.ExecuteTask = channel.unary_unary(
                '/env_manager.v1.EnvManagerService/ExecuteTask',
                request_serializer=env__manager_dot_v1__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.ExecuteTaskResponse.FromString,
                _registered_method=True)
        self.PullImages = channel.unary_stream(
                '/env_manager.v1.EnvManagerService/PullImages',
                request_serializer=env__manager_dot_v1__pb2.PullImagesRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.ImagePullProgress.FromString,
                _registered_method=True)
        self.StreamLogs = channel.unary_stream(
                '/env_manager.v1.EnvManagerService/StreamLogs',
                request_serializer=env__manager_dot_v1__pb2.StreamLogsRequest.SerializeToString,
                response_deserializer=env__manager_dot_v1__pb2.LogEntry.FromString,
                _registered_method=True)


class EnvManagerServiceServicer(object):
    """Environment Manager service for container lifecycle management
    """

    def StartServices(self, request, context):
        """Start all services with dependency resolution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopServices(self, request, context):
        """Stop all services gracefully
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestartService(self, request, context):
        """Restart a specific service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServicesStatus(self, request, context):
        """Get status of all services
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamHealth(self, request, context):
        """Stream health updates for services
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResourceAvailability(self, request, context):
        """Query resource availability
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTask(self, request, context):
        """Execute a task in an isolated environment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullImages(self, request, context):
        """Pull container images
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLogs(self, request, context):
        """Stream logs from a service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartServices': grpc.unary_stream_rpc_method_handler(
                    servicer.StartServices,
                    request_deserializer=env__manager_dot_v1__pb2.StartServicesRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.ServiceStatusUpdate.SerializeToString,
            ),
            'StopServices': grpc.unary_unary_rpc_method_handler(
                    servicer.StopServices,
                    request_deserializer=env__manager_dot_v1__pb2.StopServicesRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.StopServicesResponse.SerializeToString,
            ),
            'RestartService': grpc.unary_unary_rpc_method_handler(
                    servicer.RestartService,
                    request_deserializer=env__manager_dot_v1__pb2.RestartServiceRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.RestartServiceResponse.SerializeToString,
            ),
            'GetServicesStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServicesStatus,
                    request_deserializer=env__manager_dot_v1__pb2.GetServicesStatusRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.ServicesStatusResponse.SerializeToString,
            ),
            'StreamHealth': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamHealth,
                    request_deserializer=env__manager_dot_v1__pb2.StreamHealthRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.HealthUpdate.SerializeToString,
            ),
            'GetResourceAvailability': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResourceAvailability,
                    request_deserializer=env__manager_dot_v1__pb2.GetResourceAvailabilityRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.ResourceAvailabilityResponse.SerializeToString,
            ),
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=env__manager_dot_v1__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.ExecuteTaskResponse.SerializeToString,
            ),
            'PullImages': grpc.unary_stream_rpc_method_handler(
                    servicer.PullImages,
                    request_deserializer=env__manager_dot_v1__pb2.PullImagesRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.ImagePullProgress.SerializeToString,
            ),
            'StreamLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLogs,
                    request_deserializer=env__manager_dot_v1__pb2.StreamLogsRequest.FromString,
                    response_serializer=env__manager_dot_v1__pb2.LogEntry.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'env_manager.v1.EnvManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('env_manager.v1.EnvManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EnvManagerService(object):
    """Environment Manager service for container lifecycle management
    """

    @staticmethod
    def StartServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/env_manager.v1.EnvManagerService/StartServices',
            env__manager_dot_v1__pb2.StartServicesRequest.SerializeToString,
            env__manager_dot_v1__pb2.ServiceStatusUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/env_manager.v1.EnvManagerService/StopServices',
            env__manager_dot_v1__pb2.StopServicesRequest.SerializeToString,
            env__manager_dot_v1__pb2.StopServicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestartService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/env_manager.v1.EnvManagerService/RestartService',
            env__manager_dot_v1__pb2.RestartServiceRequest.SerializeToString,
            env__manager_dot_v1__pb2.RestartServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServicesStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/env_manager.v1.EnvManagerService/GetServicesStatus',
            env__manager_dot_v1__pb2.GetServicesStatusRequest.SerializeToString,
            env__manager_dot_v1__pb2.ServicesStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/env_manager.v1.EnvManagerService/StreamHealth',
            env__manager_dot_v1__pb2.StreamHealthRequest.SerializeToString,
            env__manager_dot_v1__pb2.HealthUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetResourceAvailability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/env_manager.v1.EnvManagerService/GetResourceAvailability',
            env__manager_dot_v1__pb2.GetResourceAvailabilityRequest.SerializeToString,
            env__manager_dot_v1__pb2.ResourceAvailabilityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/env_manager.v1.EnvManagerService/ExecuteTask',
            env__manager_dot_v1__pb2.ExecuteTaskRequest.SerializeToString,
            env__manager_dot_v1__pb2.ExecuteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PullImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/env_manager.v1.EnvManagerService/PullImages',
            env__manager_dot_v1__pb2.PullImagesRequest.SerializeToString,
            env__manager_dot_v1__pb2.ImagePullProgress.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/env_manager.v1.EnvManagerService/StreamLogs',
            env__manager_dot_v1__pb2.StreamLogsRequest.SerializeToString,
            env__manager_dot_v1__pb2.LogEntry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
