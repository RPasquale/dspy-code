# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import mesh_pb2 as mesh__pb2


class MeshDataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send = channel.unary_unary(
                '/mesh.v1.MeshData/Send',
                request_serializer=mesh__pb2.SendRequest.SerializeToString,
                response_deserializer=mesh__pb2.SendResponse.FromString,
                _registered_method=True)
        self.Subscribe = channel.stream_stream(
                '/mesh.v1.MeshData/Subscribe',
                request_serializer=mesh__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=mesh__pb2.Received.FromString,
                _registered_method=True)
        self.Ack = channel.unary_unary(
                '/mesh.v1.MeshData/Ack',
                request_serializer=mesh__pb2.AckRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class MeshDataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Send(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeshDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=mesh__pb2.SendRequest.FromString,
                    response_serializer=mesh__pb2.SendResponse.SerializeToString,
            ),
            'Subscribe': grpc.stream_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=mesh__pb2.SubscribeRequest.FromString,
                    response_serializer=mesh__pb2.Received.SerializeToString,
            ),
            'Ack': grpc.unary_unary_rpc_method_handler(
                    servicer.Ack,
                    request_deserializer=mesh__pb2.AckRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mesh.v1.MeshData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mesh.v1.MeshData', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MeshData(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mesh.v1.MeshData/Send',
            mesh__pb2.SendRequest.SerializeToString,
            mesh__pb2.SendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/mesh.v1.MeshData/Subscribe',
            mesh__pb2.SubscribeRequest.SerializeToString,
            mesh__pb2.Received.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mesh.v1.MeshData/Ack',
            mesh__pb2.AckRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MeshControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PublishState = channel.unary_unary(
                '/mesh.v1.MeshControl/PublishState',
                request_serializer=mesh__pb2.PublishStateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTopology = channel.unary_unary(
                '/mesh.v1.MeshControl/GetTopology',
                request_serializer=mesh__pb2.GetTopologyRequest.SerializeToString,
                response_deserializer=mesh__pb2.Topology.FromString,
                _registered_method=True)
        self.SetPolicy = channel.unary_unary(
                '/mesh.v1.MeshControl/SetPolicy',
                request_serializer=mesh__pb2.SetPolicyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class MeshControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PublishState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopology(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeshControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PublishState': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishState,
                    request_deserializer=mesh__pb2.PublishStateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetTopology': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopology,
                    request_deserializer=mesh__pb2.GetTopologyRequest.FromString,
                    response_serializer=mesh__pb2.Topology.SerializeToString,
            ),
            'SetPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPolicy,
                    request_deserializer=mesh__pb2.SetPolicyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mesh.v1.MeshControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mesh.v1.MeshControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MeshControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PublishState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mesh.v1.MeshControl/PublishState',
            mesh__pb2.PublishStateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTopology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mesh.v1.MeshControl/GetTopology',
            mesh__pb2.GetTopologyRequest.SerializeToString,
            mesh__pb2.Topology.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mesh.v1.MeshControl/SetPolicy',
            mesh__pb2.SetPolicyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
