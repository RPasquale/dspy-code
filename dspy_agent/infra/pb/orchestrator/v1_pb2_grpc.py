# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from orchestrator import v1_pb2 as orchestrator_dot_v1__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in orchestrator.v1_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrchestratorServiceStub(object):
    """Orchestrator service for Python agent communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTask = channel.unary_unary(
                '/orchestrator.v1.OrchestratorService/SubmitTask',
                request_serializer=orchestrator_dot_v1__pb2.SubmitTaskRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.SubmitTaskResponse.FromString,
                _registered_method=True)
        self.StreamTaskResults = channel.unary_stream(
                '/orchestrator.v1.OrchestratorService/StreamTaskResults',
                request_serializer=orchestrator_dot_v1__pb2.StreamTaskResultsRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.TaskResult.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/orchestrator.v1.OrchestratorService/GetTaskStatus',
                request_serializer=orchestrator_dot_v1__pb2.GetTaskStatusRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.GetTaskStatusResponse.FromString,
                _registered_method=True)
        self.CreateWorkflow = channel.unary_unary(
                '/orchestrator.v1.OrchestratorService/CreateWorkflow',
                request_serializer=orchestrator_dot_v1__pb2.CreateWorkflowRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.CreateWorkflowResponse.FromString,
                _registered_method=True)
        self.StartWorkflowRun = channel.unary_unary(
                '/orchestrator.v1.OrchestratorService/StartWorkflowRun',
                request_serializer=orchestrator_dot_v1__pb2.StartWorkflowRunRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.StartWorkflowRunResponse.FromString,
                _registered_method=True)
        self.StreamWorkflowStatus = channel.unary_stream(
                '/orchestrator.v1.OrchestratorService/StreamWorkflowStatus',
                request_serializer=orchestrator_dot_v1__pb2.StreamWorkflowStatusRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.WorkflowStatusUpdate.FromString,
                _registered_method=True)
        self.GetMetrics = channel.unary_unary(
                '/orchestrator.v1.OrchestratorService/GetMetrics',
                request_serializer=orchestrator_dot_v1__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.MetricsResponse.FromString,
                _registered_method=True)
        self.StreamEvents = channel.unary_stream(
                '/orchestrator.v1.OrchestratorService/StreamEvents',
                request_serializer=orchestrator_dot_v1__pb2.StreamEventsRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.SystemEvent.FromString,
                _registered_method=True)
        self.Health = channel.unary_unary(
                '/orchestrator.v1.OrchestratorService/Health',
                request_serializer=orchestrator_dot_v1__pb2.HealthRequest.SerializeToString,
                response_deserializer=orchestrator_dot_v1__pb2.HealthResponse.FromString,
                _registered_method=True)


class OrchestratorServiceServicer(object):
    """Orchestrator service for Python agent communication
    """

    def SubmitTask(self, request, context):
        """Submit a task for execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTaskResults(self, request, context):
        """Stream task results as they complete
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Get the current status of a submitted task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkflow(self, request, context):
        """Create a workflow
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartWorkflowRun(self, request, context):
        """Start a workflow run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamWorkflowStatus(self, request, context):
        """Stream workflow run status updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Get system metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamEvents(self, request, context):
        """Stream system events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrchestratorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=orchestrator_dot_v1__pb2.SubmitTaskRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.SubmitTaskResponse.SerializeToString,
            ),
            'StreamTaskResults': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTaskResults,
                    request_deserializer=orchestrator_dot_v1__pb2.StreamTaskResultsRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.TaskResult.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=orchestrator_dot_v1__pb2.GetTaskStatusRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.GetTaskStatusResponse.SerializeToString,
            ),
            'CreateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkflow,
                    request_deserializer=orchestrator_dot_v1__pb2.CreateWorkflowRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.CreateWorkflowResponse.SerializeToString,
            ),
            'StartWorkflowRun': grpc.unary_unary_rpc_method_handler(
                    servicer.StartWorkflowRun,
                    request_deserializer=orchestrator_dot_v1__pb2.StartWorkflowRunRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.StartWorkflowRunResponse.SerializeToString,
            ),
            'StreamWorkflowStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamWorkflowStatus,
                    request_deserializer=orchestrator_dot_v1__pb2.StreamWorkflowStatusRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.WorkflowStatusUpdate.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=orchestrator_dot_v1__pb2.GetMetricsRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.MetricsResponse.SerializeToString,
            ),
            'StreamEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamEvents,
                    request_deserializer=orchestrator_dot_v1__pb2.StreamEventsRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.SystemEvent.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=orchestrator_dot_v1__pb2.HealthRequest.FromString,
                    response_serializer=orchestrator_dot_v1__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orchestrator.v1.OrchestratorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('orchestrator.v1.OrchestratorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrchestratorService(object):
    """Orchestrator service for Python agent communication
    """

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/SubmitTask',
            orchestrator_dot_v1__pb2.SubmitTaskRequest.SerializeToString,
            orchestrator_dot_v1__pb2.SubmitTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTaskResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/StreamTaskResults',
            orchestrator_dot_v1__pb2.StreamTaskResultsRequest.SerializeToString,
            orchestrator_dot_v1__pb2.TaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/GetTaskStatus',
            orchestrator_dot_v1__pb2.GetTaskStatusRequest.SerializeToString,
            orchestrator_dot_v1__pb2.GetTaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/CreateWorkflow',
            orchestrator_dot_v1__pb2.CreateWorkflowRequest.SerializeToString,
            orchestrator_dot_v1__pb2.CreateWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartWorkflowRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/StartWorkflowRun',
            orchestrator_dot_v1__pb2.StartWorkflowRunRequest.SerializeToString,
            orchestrator_dot_v1__pb2.StartWorkflowRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamWorkflowStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/StreamWorkflowStatus',
            orchestrator_dot_v1__pb2.StreamWorkflowStatusRequest.SerializeToString,
            orchestrator_dot_v1__pb2.WorkflowStatusUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/GetMetrics',
            orchestrator_dot_v1__pb2.GetMetricsRequest.SerializeToString,
            orchestrator_dot_v1__pb2.MetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/StreamEvents',
            orchestrator_dot_v1__pb2.StreamEventsRequest.SerializeToString,
            orchestrator_dot_v1__pb2.SystemEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.v1.OrchestratorService/Health',
            orchestrator_dot_v1__pb2.HealthRequest.SerializeToString,
            orchestrator_dot_v1__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
