# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import runner_pb2 as runner__pb2


class EnvRunnerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Run = channel.unary_unary(
                '/runner.v1.EnvRunner/Run',
                request_serializer=runner__pb2.RunRequest.SerializeToString,
                response_deserializer=runner__pb2.RunResult.FromString,
                _registered_method=True)
        self.StreamRun = channel.unary_stream(
                '/runner.v1.EnvRunner/StreamRun',
                request_serializer=runner__pb2.RunRequest.SerializeToString,
                response_deserializer=runner__pb2.LogLine.FromString,
                _registered_method=True)
        self.Healthz = channel.unary_unary(
                '/runner.v1.EnvRunner/Healthz',
                request_serializer=runner__pb2.Empty.SerializeToString,
                response_deserializer=runner__pb2.Empty.FromString,
                _registered_method=True)


class EnvRunnerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Healthz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvRunnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Run': grpc.unary_unary_rpc_method_handler(
                    servicer.Run,
                    request_deserializer=runner__pb2.RunRequest.FromString,
                    response_serializer=runner__pb2.RunResult.SerializeToString,
            ),
            'StreamRun': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamRun,
                    request_deserializer=runner__pb2.RunRequest.FromString,
                    response_serializer=runner__pb2.LogLine.SerializeToString,
            ),
            'Healthz': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthz,
                    request_deserializer=runner__pb2.Empty.FromString,
                    response_serializer=runner__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'runner.v1.EnvRunner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('runner.v1.EnvRunner', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EnvRunner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runner.v1.EnvRunner/Run',
            runner__pb2.RunRequest.SerializeToString,
            runner__pb2.RunResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/runner.v1.EnvRunner/StreamRun',
            runner__pb2.RunRequest.SerializeToString,
            runner__pb2.LogLine.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Healthz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runner.v1.EnvRunner/Healthz',
            runner__pb2.Empty.SerializeToString,
            runner__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StreamSupervisorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenStream = channel.stream_stream(
                '/runner.v1.StreamSupervisor/OpenStream',
                request_serializer=runner__pb2.WorkerToSupervisor.SerializeToString,
                response_deserializer=runner__pb2.SupervisorToWorker.FromString,
                _registered_method=True)


class StreamSupervisorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OpenStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamSupervisorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenStream': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenStream,
                    request_deserializer=runner__pb2.WorkerToSupervisor.FromString,
                    response_serializer=runner__pb2.SupervisorToWorker.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'runner.v1.StreamSupervisor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('runner.v1.StreamSupervisor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StreamSupervisor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OpenStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/runner.v1.StreamSupervisor/OpenStream',
            runner__pb2.WorkerToSupervisor.SerializeToString,
            runner__pb2.SupervisorToWorker.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
