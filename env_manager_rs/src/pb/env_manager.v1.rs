// @generated
// This file is @generated by prost-build.
/// Service startup
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartServicesRequest {
    /// empty = all services
    #[prost(string, repeated, tag="1")]
    pub service_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// parallel startup where possible
    #[prost(bool, tag="2")]
    pub parallel: bool,
    /// service-specific config overrides
    #[prost(map="string, string", tag="3")]
    pub overrides: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceStatusUpdate {
    #[prost(string, tag="1")]
    pub service_name: ::prost::alloc::string::String,
    /// starting, healthy, unhealthy, stopped
    #[prost(string, tag="2")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub message: ::prost::alloc::string::String,
    /// 0-100
    #[prost(int32, tag="4")]
    pub progress: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopServicesRequest {
    /// empty = all services
    #[prost(string, repeated, tag="1")]
    pub service_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag="2")]
    pub timeout_seconds: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopServicesResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    /// service_name -> result message
    #[prost(map="string, string", tag="2")]
    pub service_results: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestartServiceRequest {
    #[prost(string, tag="1")]
    pub service_name: ::prost::alloc::string::String,
    #[prost(int32, tag="2")]
    pub timeout_seconds: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestartServiceResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
/// Service status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetServicesStatusRequest {
    /// empty = all services
    #[prost(string, repeated, tag="1")]
    pub service_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServicesStatusResponse {
    #[prost(map="string, message", tag="1")]
    pub services: ::std::collections::HashMap<::prost::alloc::string::String, ServiceStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceStatus {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// running, stopped, starting, unhealthy
    #[prost(string, tag="2")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(int32, repeated, tag="4")]
    pub ports: ::prost::alloc::vec::Vec<i32>,
    #[prost(map="string, string", tag="5")]
    pub health_checks: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(int64, tag="6")]
    pub started_at: i64,
    #[prost(message, optional, tag="7")]
    pub resource_usage: ::core::option::Option<ResourceUsage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResourceUsage {
    #[prost(double, tag="1")]
    pub cpu_percent: f64,
    #[prost(int64, tag="2")]
    pub memory_bytes: i64,
    #[prost(int64, tag="3")]
    pub network_rx_bytes: i64,
    #[prost(int64, tag="4")]
    pub network_tx_bytes: i64,
}
/// Health streaming
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamHealthRequest {
    /// empty = all services
    #[prost(string, repeated, tag="1")]
    pub service_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// polling interval
    #[prost(int32, tag="2")]
    pub interval_seconds: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthUpdate {
    #[prost(string, tag="1")]
    pub service_name: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub healthy: bool,
    #[prost(string, tag="3")]
    pub message: ::prost::alloc::string::String,
    #[prost(int64, tag="4")]
    pub timestamp: i64,
    #[prost(map="string, string", tag="5")]
    pub details: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// Resource availability
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResourceAvailabilityRequest {
    /// cpu_short, cpu_long, gpu
    #[prost(string, tag="1")]
    pub workload_class: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceAvailabilityResponse {
    #[prost(bool, tag="1")]
    pub available: bool,
    #[prost(int32, tag="2")]
    pub capacity: i32,
    #[prost(int32, tag="3")]
    pub in_use: i32,
    #[prost(message, optional, tag="4")]
    pub hardware: ::core::option::Option<HardwareInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HardwareInfo {
    #[prost(int32, tag="1")]
    pub cpu_cores: i32,
    #[prost(int64, tag="2")]
    pub memory_bytes: i64,
    #[prost(message, repeated, tag="3")]
    pub gpus: ::prost::alloc::vec::Vec<Gpu>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpu {
    #[prost(int32, tag="1")]
    pub index: i32,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag="3")]
    pub memory_bytes: i64,
    #[prost(double, tag="4")]
    pub utilization_percent: f64,
}
/// Task execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTaskRequest {
    #[prost(string, tag="1")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub workload_class: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="3")]
    pub payload: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(int32, tag="4")]
    pub timeout_seconds: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTaskResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(map="string, string", tag="2")]
    pub result: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(string, tag="3")]
    pub error: ::prost::alloc::string::String,
    #[prost(double, tag="4")]
    pub latency_ms: f64,
}
/// Image pulling
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PullImagesRequest {
    /// empty = all required images
    #[prost(string, repeated, tag="1")]
    pub image_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImagePullProgress {
    #[prost(string, tag="1")]
    pub image_name: ::prost::alloc::string::String,
    /// downloading, extracting, complete, error
    #[prost(string, tag="2")]
    pub status: ::prost::alloc::string::String,
    #[prost(int64, tag="3")]
    pub current: i64,
    #[prost(int64, tag="4")]
    pub total: i64,
    #[prost(int32, tag="5")]
    pub progress_percent: i32,
}
/// Log streaming
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamLogsRequest {
    /// required
    #[prost(string, tag="1")]
    pub service_name: ::prost::alloc::string::String,
    /// continue streaming new logs
    #[prost(bool, tag="2")]
    pub follow: bool,
    /// number of lines from end (0 = all)
    #[prost(int32, tag="3")]
    pub tail: i32,
    /// Unix timestamp to start from
    #[prost(int64, tag="4")]
    pub since_timestamp: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogEntry {
    #[prost(string, tag="1")]
    pub service_name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub container_id: ::prost::alloc::string::String,
    /// stdout or stderr
    #[prost(string, tag="3")]
    pub stream: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub message: ::prost::alloc::string::String,
    #[prost(int64, tag="5")]
    pub timestamp: i64,
}
include!("env_manager.v1.tonic.rs");
// @@protoc_insertion_point(module)