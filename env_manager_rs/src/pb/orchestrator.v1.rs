// @generated
// This file is @generated by prost-build.
/// Task submission
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTaskRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// cpu_short, cpu_long, gpu, gpu_slurm
    #[prost(string, tag="2")]
    pub class: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="3")]
    pub payload: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(int32, tag="4")]
    pub priority: i32,
    #[prost(string, tag="5")]
    pub workflow_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTaskResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(string, tag="2")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub error: ::prost::alloc::string::String,
}
/// Task results streaming
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamTaskResultsRequest {
    /// empty = all tasks
    #[prost(string, repeated, tag="1")]
    pub task_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="2")]
    pub include_completed: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskResult {
    #[prost(string, tag="1")]
    pub task_id: ::prost::alloc::string::String,
    /// pending, running, completed, failed
    #[prost(string, tag="2")]
    pub status: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="3")]
    pub result: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(string, tag="4")]
    pub error: ::prost::alloc::string::String,
    #[prost(double, tag="5")]
    pub duration_ms: f64,
    #[prost(int64, tag="6")]
    pub completed_at: i64,
}
/// Workflow management
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWorkflowRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    /// JSON workflow specification
    #[prost(bytes="vec", tag="4")]
    pub spec: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWorkflowResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(string, tag="2")]
    pub workflow_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub error: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartWorkflowRunRequest {
    #[prost(string, tag="1")]
    pub workflow_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub idempotency_key: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="3")]
    pub input: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartWorkflowRunResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(string, tag="2")]
    pub run_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub error: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamWorkflowStatusRequest {
    #[prost(string, tag="1")]
    pub run_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkflowStatusUpdate {
    #[prost(string, tag="1")]
    pub run_id: ::prost::alloc::string::String,
    /// pending, running, completed, failed
    #[prost(string, tag="2")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub current_step: ::prost::alloc::string::String,
    #[prost(int32, tag="4")]
    pub steps_completed: i32,
    #[prost(int32, tag="5")]
    pub total_steps: i32,
    #[prost(map="string, string", tag="6")]
    pub output: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(string, tag="7")]
    pub error: ::prost::alloc::string::String,
}
/// Metrics
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMetricsRequest {
    /// empty = all metrics
    #[prost(string, repeated, tag="1")]
    pub metric_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsResponse {
    #[prost(map="string, double", tag="1")]
    pub metrics: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
    #[prost(int64, tag="2")]
    pub timestamp: i64,
}
/// Event streaming
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamEventsRequest {
    /// empty = all events
    #[prost(string, repeated, tag="1")]
    pub event_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag="2")]
    pub since_timestamp: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemEvent {
    /// task_submitted, task_completed, task_failed, workflow_started, etc.
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    /// task_id, workflow_id, etc.
    #[prost(string, tag="2")]
    pub resource_id: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="3")]
    pub data: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(int64, tag="4")]
    pub timestamp: i64,
}
/// Health
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HealthRequest {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    #[prost(bool, tag="1")]
    pub healthy: bool,
    #[prost(string, tag="2")]
    pub version: ::prost::alloc::string::String,
    /// service_name -> status
    #[prost(map="string, string", tag="3")]
    pub services: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
include!("orchestrator.v1.tonic.rs");
// @@protoc_insertion_point(module)