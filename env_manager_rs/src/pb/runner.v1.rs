// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceHints {
    #[prost(uint32, tag="1")]
    pub cpu_millicores: u32,
    #[prost(uint64, tag="2")]
    pub mem_bytes: u64,
    #[prost(uint32, tag="3")]
    pub gpu_count: u32,
    #[prost(string, tag="4")]
    pub gpu_class: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mount {
    #[prost(string, tag="1")]
    pub host_path: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub mount_path: ::prost::alloc::string::String,
    #[prost(bool, tag="3")]
    pub read_only: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunEnv {
    #[prost(string, tag="1")]
    pub oci_image: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="2")]
    pub argv: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map="string, string", tag="3")]
    pub env: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(message, repeated, tag="4")]
    pub mounts: ::prost::alloc::vec::Vec<Mount>,
    #[prost(uint64, tag="5")]
    pub hard_timeout_ms: u64,
    #[prost(message, optional, tag="6")]
    pub resources: ::core::option::Option<ResourceHints>,
    #[prost(string, tag="7")]
    pub content_digest: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TensorMeta {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, repeated, tag="2")]
    pub shape: ::prost::alloc::vec::Vec<i64>,
    #[prost(string, tag="3")]
    pub dtype: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunRequest {
    #[prost(string, tag="1")]
    pub job_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub run_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub env: ::core::option::Option<RunEnv>,
    #[prost(message, repeated, tag="4")]
    pub inputs: ::prost::alloc::vec::Vec<TensorMeta>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogLine {
    #[prost(string, tag="1")]
    pub ts: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub level: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub msg: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResult {
    #[prost(int32, tag="1")]
    pub exit_code: i32,
    #[prost(message, repeated, tag="2")]
    pub logs: ::prost::alloc::vec::Vec<LogLine>,
    #[prost(message, repeated, tag="3")]
    pub outputs: ::prost::alloc::vec::Vec<TensorMeta>,
    #[prost(string, tag="4")]
    pub cache_key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreditReport {
    #[prost(string, tag="1")]
    pub worker_id: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub credits: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkerHello {
    #[prost(string, tag="1")]
    pub worker_id: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub max_inflight: u32,
    #[prost(string, tag="3")]
    pub version: ::prost::alloc::string::String,
    #[prost(bool, tag="4")]
    pub mesh_enabled: bool,
    #[prost(uint64, tag="5")]
    pub mesh_node_id: u64,
    #[prost(string, tag="6")]
    pub mesh_domain: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskAck {
    #[prost(string, tag="1")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub success: bool,
    #[prost(string, tag="3")]
    pub error: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskAssignment {
    #[prost(string, tag="1")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub tenant: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub topic: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="4")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag="5")]
    pub offset: i64,
    #[prost(string, tag="6")]
    pub partition: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkerHeartbeat {
    #[prost(string, tag="1")]
    pub worker_id: ::prost::alloc::string::String,
    #[prost(uint64, tag="2")]
    pub processed: u64,
    #[prost(uint64, tag="3")]
    pub failed: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkerToSupervisor {
    #[prost(oneof="worker_to_supervisor::Msg", tags="1, 2, 3, 4")]
    pub msg: ::core::option::Option<worker_to_supervisor::Msg>,
}
/// Nested message and enum types in `WorkerToSupervisor`.
pub mod worker_to_supervisor {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Msg {
        #[prost(message, tag="1")]
        Hello(super::WorkerHello),
        #[prost(message, tag="2")]
        Credit(super::CreditReport),
        #[prost(message, tag="3")]
        Ack(super::TaskAck),
        #[prost(message, tag="4")]
        Heartbeat(super::WorkerHeartbeat),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SupervisorToWorker {
    #[prost(oneof="supervisor_to_worker::Msg", tags="1")]
    pub msg: ::core::option::Option<supervisor_to_worker::Msg>,
}
/// Nested message and enum types in `SupervisorToWorker`.
pub mod supervisor_to_worker {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Msg {
        #[prost(message, tag="1")]
        Assignment(super::TaskAssignment),
    }
}
include!("runner.v1.tonic.rs");
// @@protoc_insertion_point(module)