// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: env_manager.v1.proto

package envmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvManagerService_StartServices_FullMethodName           = "/env_manager.v1.EnvManagerService/StartServices"
	EnvManagerService_StopServices_FullMethodName            = "/env_manager.v1.EnvManagerService/StopServices"
	EnvManagerService_RestartService_FullMethodName          = "/env_manager.v1.EnvManagerService/RestartService"
	EnvManagerService_GetServicesStatus_FullMethodName       = "/env_manager.v1.EnvManagerService/GetServicesStatus"
	EnvManagerService_StreamHealth_FullMethodName            = "/env_manager.v1.EnvManagerService/StreamHealth"
	EnvManagerService_GetResourceAvailability_FullMethodName = "/env_manager.v1.EnvManagerService/GetResourceAvailability"
	EnvManagerService_ExecuteTask_FullMethodName             = "/env_manager.v1.EnvManagerService/ExecuteTask"
	EnvManagerService_PullImages_FullMethodName              = "/env_manager.v1.EnvManagerService/PullImages"
)

// EnvManagerServiceClient is the client API for EnvManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Environment Manager service for container lifecycle management
type EnvManagerServiceClient interface {
	// Start all services with dependency resolution
	StartServices(ctx context.Context, in *StartServicesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServiceStatusUpdate], error)
	// Stop all services gracefully
	StopServices(ctx context.Context, in *StopServicesRequest, opts ...grpc.CallOption) (*StopServicesResponse, error)
	// Restart a specific service
	RestartService(ctx context.Context, in *RestartServiceRequest, opts ...grpc.CallOption) (*RestartServiceResponse, error)
	// Get status of all services
	GetServicesStatus(ctx context.Context, in *GetServicesStatusRequest, opts ...grpc.CallOption) (*ServicesStatusResponse, error)
	// Stream health updates for services
	StreamHealth(ctx context.Context, in *StreamHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthUpdate], error)
	// Query resource availability
	GetResourceAvailability(ctx context.Context, in *GetResourceAvailabilityRequest, opts ...grpc.CallOption) (*ResourceAvailabilityResponse, error)
	// Execute a task in an isolated environment
	ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskResponse, error)
	// Pull container images
	PullImages(ctx context.Context, in *PullImagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImagePullProgress], error)
}

type envManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvManagerServiceClient(cc grpc.ClientConnInterface) EnvManagerServiceClient {
	return &envManagerServiceClient{cc}
}

func (c *envManagerServiceClient) StartServices(ctx context.Context, in *StartServicesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServiceStatusUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnvManagerService_ServiceDesc.Streams[0], EnvManagerService_StartServices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StartServicesRequest, ServiceStatusUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnvManagerService_StartServicesClient = grpc.ServerStreamingClient[ServiceStatusUpdate]

func (c *envManagerServiceClient) StopServices(ctx context.Context, in *StopServicesRequest, opts ...grpc.CallOption) (*StopServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopServicesResponse)
	err := c.cc.Invoke(ctx, EnvManagerService_StopServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envManagerServiceClient) RestartService(ctx context.Context, in *RestartServiceRequest, opts ...grpc.CallOption) (*RestartServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartServiceResponse)
	err := c.cc.Invoke(ctx, EnvManagerService_RestartService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envManagerServiceClient) GetServicesStatus(ctx context.Context, in *GetServicesStatusRequest, opts ...grpc.CallOption) (*ServicesStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServicesStatusResponse)
	err := c.cc.Invoke(ctx, EnvManagerService_GetServicesStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envManagerServiceClient) StreamHealth(ctx context.Context, in *StreamHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnvManagerService_ServiceDesc.Streams[1], EnvManagerService_StreamHealth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamHealthRequest, HealthUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnvManagerService_StreamHealthClient = grpc.ServerStreamingClient[HealthUpdate]

func (c *envManagerServiceClient) GetResourceAvailability(ctx context.Context, in *GetResourceAvailabilityRequest, opts ...grpc.CallOption) (*ResourceAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceAvailabilityResponse)
	err := c.cc.Invoke(ctx, EnvManagerService_GetResourceAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envManagerServiceClient) ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTaskResponse)
	err := c.cc.Invoke(ctx, EnvManagerService_ExecuteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envManagerServiceClient) PullImages(ctx context.Context, in *PullImagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImagePullProgress], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnvManagerService_ServiceDesc.Streams[2], EnvManagerService_PullImages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullImagesRequest, ImagePullProgress]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnvManagerService_PullImagesClient = grpc.ServerStreamingClient[ImagePullProgress]

// EnvManagerServiceServer is the server API for EnvManagerService service.
// All implementations must embed UnimplementedEnvManagerServiceServer
// for forward compatibility.
//
// Environment Manager service for container lifecycle management
type EnvManagerServiceServer interface {
	// Start all services with dependency resolution
	StartServices(*StartServicesRequest, grpc.ServerStreamingServer[ServiceStatusUpdate]) error
	// Stop all services gracefully
	StopServices(context.Context, *StopServicesRequest) (*StopServicesResponse, error)
	// Restart a specific service
	RestartService(context.Context, *RestartServiceRequest) (*RestartServiceResponse, error)
	// Get status of all services
	GetServicesStatus(context.Context, *GetServicesStatusRequest) (*ServicesStatusResponse, error)
	// Stream health updates for services
	StreamHealth(*StreamHealthRequest, grpc.ServerStreamingServer[HealthUpdate]) error
	// Query resource availability
	GetResourceAvailability(context.Context, *GetResourceAvailabilityRequest) (*ResourceAvailabilityResponse, error)
	// Execute a task in an isolated environment
	ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskResponse, error)
	// Pull container images
	PullImages(*PullImagesRequest, grpc.ServerStreamingServer[ImagePullProgress]) error
	mustEmbedUnimplementedEnvManagerServiceServer()
}

// UnimplementedEnvManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvManagerServiceServer struct{}

func (UnimplementedEnvManagerServiceServer) StartServices(*StartServicesRequest, grpc.ServerStreamingServer[ServiceStatusUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StartServices not implemented")
}
func (UnimplementedEnvManagerServiceServer) StopServices(context.Context, *StopServicesRequest) (*StopServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServices not implemented")
}
func (UnimplementedEnvManagerServiceServer) RestartService(context.Context, *RestartServiceRequest) (*RestartServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartService not implemented")
}
func (UnimplementedEnvManagerServiceServer) GetServicesStatus(context.Context, *GetServicesStatusRequest) (*ServicesStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesStatus not implemented")
}
func (UnimplementedEnvManagerServiceServer) StreamHealth(*StreamHealthRequest, grpc.ServerStreamingServer[HealthUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamHealth not implemented")
}
func (UnimplementedEnvManagerServiceServer) GetResourceAvailability(context.Context, *GetResourceAvailabilityRequest) (*ResourceAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceAvailability not implemented")
}
func (UnimplementedEnvManagerServiceServer) ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (UnimplementedEnvManagerServiceServer) PullImages(*PullImagesRequest, grpc.ServerStreamingServer[ImagePullProgress]) error {
	return status.Errorf(codes.Unimplemented, "method PullImages not implemented")
}
func (UnimplementedEnvManagerServiceServer) mustEmbedUnimplementedEnvManagerServiceServer() {}
func (UnimplementedEnvManagerServiceServer) testEmbeddedByValue()                           {}

// UnsafeEnvManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvManagerServiceServer will
// result in compilation errors.
type UnsafeEnvManagerServiceServer interface {
	mustEmbedUnimplementedEnvManagerServiceServer()
}

func RegisterEnvManagerServiceServer(s grpc.ServiceRegistrar, srv EnvManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnvManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvManagerService_ServiceDesc, srv)
}

func _EnvManagerService_StartServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartServicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvManagerServiceServer).StartServices(m, &grpc.GenericServerStream[StartServicesRequest, ServiceStatusUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnvManagerService_StartServicesServer = grpc.ServerStreamingServer[ServiceStatusUpdate]

func _EnvManagerService_StopServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManagerServiceServer).StopServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManagerService_StopServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManagerServiceServer).StopServices(ctx, req.(*StopServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvManagerService_RestartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManagerServiceServer).RestartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManagerService_RestartService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManagerServiceServer).RestartService(ctx, req.(*RestartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvManagerService_GetServicesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManagerServiceServer).GetServicesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManagerService_GetServicesStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManagerServiceServer).GetServicesStatus(ctx, req.(*GetServicesStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvManagerService_StreamHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvManagerServiceServer).StreamHealth(m, &grpc.GenericServerStream[StreamHealthRequest, HealthUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnvManagerService_StreamHealthServer = grpc.ServerStreamingServer[HealthUpdate]

func _EnvManagerService_GetResourceAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManagerServiceServer).GetResourceAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManagerService_GetResourceAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManagerServiceServer).GetResourceAvailability(ctx, req.(*GetResourceAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvManagerService_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvManagerServiceServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvManagerService_ExecuteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvManagerServiceServer).ExecuteTask(ctx, req.(*ExecuteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvManagerService_PullImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullImagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvManagerServiceServer).PullImages(m, &grpc.GenericServerStream[PullImagesRequest, ImagePullProgress]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnvManagerService_PullImagesServer = grpc.ServerStreamingServer[ImagePullProgress]

// EnvManagerService_ServiceDesc is the grpc.ServiceDesc for EnvManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "env_manager.v1.EnvManagerService",
	HandlerType: (*EnvManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopServices",
			Handler:    _EnvManagerService_StopServices_Handler,
		},
		{
			MethodName: "RestartService",
			Handler:    _EnvManagerService_RestartService_Handler,
		},
		{
			MethodName: "GetServicesStatus",
			Handler:    _EnvManagerService_GetServicesStatus_Handler,
		},
		{
			MethodName: "GetResourceAvailability",
			Handler:    _EnvManagerService_GetResourceAvailability_Handler,
		},
		{
			MethodName: "ExecuteTask",
			Handler:    _EnvManagerService_ExecuteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartServices",
			Handler:       _EnvManagerService_StartServices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamHealth",
			Handler:       _EnvManagerService_StreamHealth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullImages",
			Handler:       _EnvManagerService_PullImages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "env_manager.v1.proto",
}
