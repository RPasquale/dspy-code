// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: orchestrator.v1.proto

package orchestrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrchestratorService_SubmitTask_FullMethodName           = "/orchestrator.v1.OrchestratorService/SubmitTask"
	OrchestratorService_StreamTaskResults_FullMethodName    = "/orchestrator.v1.OrchestratorService/StreamTaskResults"
	OrchestratorService_GetTaskStatus_FullMethodName        = "/orchestrator.v1.OrchestratorService/GetTaskStatus"
	OrchestratorService_CreateWorkflow_FullMethodName       = "/orchestrator.v1.OrchestratorService/CreateWorkflow"
	OrchestratorService_StartWorkflowRun_FullMethodName     = "/orchestrator.v1.OrchestratorService/StartWorkflowRun"
	OrchestratorService_StreamWorkflowStatus_FullMethodName = "/orchestrator.v1.OrchestratorService/StreamWorkflowStatus"
	OrchestratorService_GetMetrics_FullMethodName           = "/orchestrator.v1.OrchestratorService/GetMetrics"
	OrchestratorService_StreamEvents_FullMethodName         = "/orchestrator.v1.OrchestratorService/StreamEvents"
	OrchestratorService_Health_FullMethodName               = "/orchestrator.v1.OrchestratorService/Health"
)

// OrchestratorServiceClient is the client API for OrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Orchestrator service for Python agent communication
type OrchestratorServiceClient interface {
	// Submit a task for execution
	SubmitTask(ctx context.Context, in *SubmitTaskRequest, opts ...grpc.CallOption) (*SubmitTaskResponse, error)
	// Stream task results as they complete
	StreamTaskResults(ctx context.Context, in *StreamTaskResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskResult], error)
	// Get the current status of a submitted task
	GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*GetTaskStatusResponse, error)
	// Create a workflow
	CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*CreateWorkflowResponse, error)
	// Start a workflow run
	StartWorkflowRun(ctx context.Context, in *StartWorkflowRunRequest, opts ...grpc.CallOption) (*StartWorkflowRunResponse, error)
	// Stream workflow run status updates
	StreamWorkflowStatus(ctx context.Context, in *StreamWorkflowStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkflowStatusUpdate], error)
	// Get system metrics
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	// Stream system events
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SystemEvent], error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type orchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorServiceClient(cc grpc.ClientConnInterface) OrchestratorServiceClient {
	return &orchestratorServiceClient{cc}
}

func (c *orchestratorServiceClient) SubmitTask(ctx context.Context, in *SubmitTaskRequest, opts ...grpc.CallOption) (*SubmitTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTaskResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_SubmitTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) StreamTaskResults(ctx context.Context, in *StreamTaskResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrchestratorService_ServiceDesc.Streams[0], OrchestratorService_StreamTaskResults_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTaskResultsRequest, TaskResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestratorService_StreamTaskResultsClient = grpc.ServerStreamingClient[TaskResult]

func (c *orchestratorServiceClient) GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*GetTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskStatusResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*CreateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkflowResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) StartWorkflowRun(ctx context.Context, in *StartWorkflowRunRequest, opts ...grpc.CallOption) (*StartWorkflowRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartWorkflowRunResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_StartWorkflowRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) StreamWorkflowStatus(ctx context.Context, in *StreamWorkflowStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkflowStatusUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrchestratorService_ServiceDesc.Streams[1], OrchestratorService_StreamWorkflowStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamWorkflowStatusRequest, WorkflowStatusUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestratorService_StreamWorkflowStatusClient = grpc.ServerStreamingClient[WorkflowStatusUpdate]

func (c *orchestratorServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SystemEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrchestratorService_ServiceDesc.Streams[2], OrchestratorService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, SystemEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestratorService_StreamEventsClient = grpc.ServerStreamingClient[SystemEvent]

func (c *orchestratorServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServiceServer is the server API for OrchestratorService service.
// All implementations must embed UnimplementedOrchestratorServiceServer
// for forward compatibility.
//
// Orchestrator service for Python agent communication
type OrchestratorServiceServer interface {
	// Submit a task for execution
	SubmitTask(context.Context, *SubmitTaskRequest) (*SubmitTaskResponse, error)
	// Stream task results as they complete
	StreamTaskResults(*StreamTaskResultsRequest, grpc.ServerStreamingServer[TaskResult]) error
	// Get the current status of a submitted task
	GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error)
	// Create a workflow
	CreateWorkflow(context.Context, *CreateWorkflowRequest) (*CreateWorkflowResponse, error)
	// Start a workflow run
	StartWorkflowRun(context.Context, *StartWorkflowRunRequest) (*StartWorkflowRunResponse, error)
	// Stream workflow run status updates
	StreamWorkflowStatus(*StreamWorkflowStatusRequest, grpc.ServerStreamingServer[WorkflowStatusUpdate]) error
	// Get system metrics
	GetMetrics(context.Context, *GetMetricsRequest) (*MetricsResponse, error)
	// Stream system events
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[SystemEvent]) error
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedOrchestratorServiceServer()
}

// UnimplementedOrchestratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServiceServer struct{}

func (UnimplementedOrchestratorServiceServer) SubmitTask(context.Context, *SubmitTaskRequest) (*SubmitTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTask not implemented")
}
func (UnimplementedOrchestratorServiceServer) StreamTaskResults(*StreamTaskResultsRequest, grpc.ServerStreamingServer[TaskResult]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskResults not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedOrchestratorServiceServer) CreateWorkflow(context.Context, *CreateWorkflowRequest) (*CreateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedOrchestratorServiceServer) StartWorkflowRun(context.Context, *StartWorkflowRunRequest) (*StartWorkflowRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkflowRun not implemented")
}
func (UnimplementedOrchestratorServiceServer) StreamWorkflowStatus(*StreamWorkflowStatusRequest, grpc.ServerStreamingServer[WorkflowStatusUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWorkflowStatus not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedOrchestratorServiceServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[SystemEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedOrchestratorServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {}
func (UnimplementedOrchestratorServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServiceServer will
// result in compilation errors.
type UnsafeOrchestratorServiceServer interface {
	mustEmbedUnimplementedOrchestratorServiceServer()
}

func RegisterOrchestratorServiceServer(s grpc.ServiceRegistrar, srv OrchestratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrchestratorService_ServiceDesc, srv)
}

func _OrchestratorService_SubmitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).SubmitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_SubmitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).SubmitTask(ctx, req.(*SubmitTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_StreamTaskResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTaskResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrchestratorServiceServer).StreamTaskResults(m, &grpc.GenericServerStream[StreamTaskResultsRequest, TaskResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestratorService_StreamTaskResultsServer = grpc.ServerStreamingServer[TaskResult]

func _OrchestratorService_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetTaskStatus(ctx, req.(*GetTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).CreateWorkflow(ctx, req.(*CreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_StartWorkflowRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkflowRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).StartWorkflowRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_StartWorkflowRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).StartWorkflowRun(ctx, req.(*StartWorkflowRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_StreamWorkflowStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamWorkflowStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrchestratorServiceServer).StreamWorkflowStatus(m, &grpc.GenericServerStream[StreamWorkflowStatusRequest, WorkflowStatusUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestratorService_StreamWorkflowStatusServer = grpc.ServerStreamingServer[WorkflowStatusUpdate]

func _OrchestratorService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrchestratorServiceServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, SystemEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestratorService_StreamEventsServer = grpc.ServerStreamingServer[SystemEvent]

func _OrchestratorService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorService_ServiceDesc is the grpc.ServiceDesc for OrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.v1.OrchestratorService",
	HandlerType: (*OrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTask",
			Handler:    _OrchestratorService_SubmitTask_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _OrchestratorService_GetTaskStatus_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _OrchestratorService_CreateWorkflow_Handler,
		},
		{
			MethodName: "StartWorkflowRun",
			Handler:    _OrchestratorService_StartWorkflowRun_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _OrchestratorService_GetMetrics_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _OrchestratorService_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTaskResults",
			Handler:       _OrchestratorService_StreamTaskResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamWorkflowStatus",
			Handler:       _OrchestratorService_StreamWorkflowStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _OrchestratorService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orchestrator.v1.proto",
}
