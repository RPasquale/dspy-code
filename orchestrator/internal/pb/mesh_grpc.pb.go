// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mesh.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeshData_Send_FullMethodName      = "/mesh.v1.MeshData/Send"
	MeshData_Subscribe_FullMethodName = "/mesh.v1.MeshData/Subscribe"
	MeshData_Ack_FullMethodName       = "/mesh.v1.MeshData/Ack"
)

// MeshDataClient is the client API for MeshData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshDataClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeRequest, Received], error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type meshDataClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshDataClient(cc grpc.ClientConnInterface) MeshDataClient {
	return &meshDataClient{cc}
}

func (c *meshDataClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, MeshData_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshDataClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeRequest, Received], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MeshData_ServiceDesc.Streams[0], MeshData_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, Received]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshData_SubscribeClient = grpc.BidiStreamingClient[SubscribeRequest, Received]

func (c *meshDataClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MeshData_Ack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshDataServer is the server API for MeshData service.
// All implementations must embed UnimplementedMeshDataServer
// for forward compatibility.
type MeshDataServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	Subscribe(grpc.BidiStreamingServer[SubscribeRequest, Received]) error
	Ack(context.Context, *AckRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMeshDataServer()
}

// UnimplementedMeshDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeshDataServer struct{}

func (UnimplementedMeshDataServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMeshDataServer) Subscribe(grpc.BidiStreamingServer[SubscribeRequest, Received]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMeshDataServer) Ack(context.Context, *AckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedMeshDataServer) mustEmbedUnimplementedMeshDataServer() {}
func (UnimplementedMeshDataServer) testEmbeddedByValue()                  {}

// UnsafeMeshDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshDataServer will
// result in compilation errors.
type UnsafeMeshDataServer interface {
	mustEmbedUnimplementedMeshDataServer()
}

func RegisterMeshDataServer(s grpc.ServiceRegistrar, srv MeshDataServer) {
	// If the following call pancis, it indicates UnimplementedMeshDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeshData_ServiceDesc, srv)
}

func _MeshData_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshDataServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshData_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshDataServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshData_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MeshDataServer).Subscribe(&grpc.GenericServerStream[SubscribeRequest, Received]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshData_SubscribeServer = grpc.BidiStreamingServer[SubscribeRequest, Received]

func _MeshData_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshDataServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshData_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshDataServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeshData_ServiceDesc is the grpc.ServiceDesc for MeshData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeshData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mesh.v1.MeshData",
	HandlerType: (*MeshDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MeshData_Send_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _MeshData_Ack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MeshData_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mesh.proto",
}

const (
	MeshControl_PublishState_FullMethodName = "/mesh.v1.MeshControl/PublishState"
	MeshControl_GetTopology_FullMethodName  = "/mesh.v1.MeshControl/GetTopology"
	MeshControl_SetPolicy_FullMethodName    = "/mesh.v1.MeshControl/SetPolicy"
)

// MeshControlClient is the client API for MeshControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshControlClient interface {
	PublishState(ctx context.Context, in *PublishStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTopology(ctx context.Context, in *GetTopologyRequest, opts ...grpc.CallOption) (*Topology, error)
	SetPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type meshControlClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshControlClient(cc grpc.ClientConnInterface) MeshControlClient {
	return &meshControlClient{cc}
}

func (c *meshControlClient) PublishState(ctx context.Context, in *PublishStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MeshControl_PublishState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshControlClient) GetTopology(ctx context.Context, in *GetTopologyRequest, opts ...grpc.CallOption) (*Topology, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Topology)
	err := c.cc.Invoke(ctx, MeshControl_GetTopology_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshControlClient) SetPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MeshControl_SetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshControlServer is the server API for MeshControl service.
// All implementations must embed UnimplementedMeshControlServer
// for forward compatibility.
type MeshControlServer interface {
	PublishState(context.Context, *PublishStateRequest) (*emptypb.Empty, error)
	GetTopology(context.Context, *GetTopologyRequest) (*Topology, error)
	SetPolicy(context.Context, *SetPolicyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMeshControlServer()
}

// UnimplementedMeshControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeshControlServer struct{}

func (UnimplementedMeshControlServer) PublishState(context.Context, *PublishStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishState not implemented")
}
func (UnimplementedMeshControlServer) GetTopology(context.Context, *GetTopologyRequest) (*Topology, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopology not implemented")
}
func (UnimplementedMeshControlServer) SetPolicy(context.Context, *SetPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPolicy not implemented")
}
func (UnimplementedMeshControlServer) mustEmbedUnimplementedMeshControlServer() {}
func (UnimplementedMeshControlServer) testEmbeddedByValue()                     {}

// UnsafeMeshControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshControlServer will
// result in compilation errors.
type UnsafeMeshControlServer interface {
	mustEmbedUnimplementedMeshControlServer()
}

func RegisterMeshControlServer(s grpc.ServiceRegistrar, srv MeshControlServer) {
	// If the following call pancis, it indicates UnimplementedMeshControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeshControl_ServiceDesc, srv)
}

func _MeshControl_PublishState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshControlServer).PublishState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshControl_PublishState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshControlServer).PublishState(ctx, req.(*PublishStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshControl_GetTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshControlServer).GetTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshControl_GetTopology_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshControlServer).GetTopology(ctx, req.(*GetTopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshControl_SetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshControlServer).SetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshControl_SetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshControlServer).SetPolicy(ctx, req.(*SetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeshControl_ServiceDesc is the grpc.ServiceDesc for MeshControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeshControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mesh.v1.MeshControl",
	HandlerType: (*MeshControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishState",
			Handler:    _MeshControl_PublishState_Handler,
		},
		{
			MethodName: "GetTopology",
			Handler:    _MeshControl_GetTopology_Handler,
		},
		{
			MethodName: "SetPolicy",
			Handler:    _MeshControl_SetPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mesh.proto",
}
