// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/runner.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvRunner_Run_FullMethodName       = "/runner.v1.EnvRunner/Run"
	EnvRunner_StreamRun_FullMethodName = "/runner.v1.EnvRunner/StreamRun"
	EnvRunner_Healthz_FullMethodName   = "/runner.v1.EnvRunner/Healthz"
)

// EnvRunnerClient is the client API for EnvRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvRunnerClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResult, error)
	StreamRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLine], error)
	Healthz(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type envRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvRunnerClient(cc grpc.ClientConnInterface) EnvRunnerClient {
	return &envRunnerClient{cc}
}

func (c *envRunnerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunResult)
	err := c.cc.Invoke(ctx, EnvRunner_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envRunnerClient) StreamRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLine], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnvRunner_ServiceDesc.Streams[0], EnvRunner_StreamRun_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunRequest, LogLine]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnvRunner_StreamRunClient = grpc.ServerStreamingClient[LogLine]

func (c *envRunnerClient) Healthz(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, EnvRunner_Healthz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvRunnerServer is the server API for EnvRunner service.
// All implementations must embed UnimplementedEnvRunnerServer
// for forward compatibility.
type EnvRunnerServer interface {
	Run(context.Context, *RunRequest) (*RunResult, error)
	StreamRun(*RunRequest, grpc.ServerStreamingServer[LogLine]) error
	Healthz(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedEnvRunnerServer()
}

// UnimplementedEnvRunnerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvRunnerServer struct{}

func (UnimplementedEnvRunnerServer) Run(context.Context, *RunRequest) (*RunResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedEnvRunnerServer) StreamRun(*RunRequest, grpc.ServerStreamingServer[LogLine]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRun not implemented")
}
func (UnimplementedEnvRunnerServer) Healthz(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedEnvRunnerServer) mustEmbedUnimplementedEnvRunnerServer() {}
func (UnimplementedEnvRunnerServer) testEmbeddedByValue()                   {}

// UnsafeEnvRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvRunnerServer will
// result in compilation errors.
type UnsafeEnvRunnerServer interface {
	mustEmbedUnimplementedEnvRunnerServer()
}

func RegisterEnvRunnerServer(s grpc.ServiceRegistrar, srv EnvRunnerServer) {
	// If the following call pancis, it indicates UnimplementedEnvRunnerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvRunner_ServiceDesc, srv)
}

func _EnvRunner_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvRunnerServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvRunner_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvRunnerServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvRunner_StreamRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvRunnerServer).StreamRun(m, &grpc.GenericServerStream[RunRequest, LogLine]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnvRunner_StreamRunServer = grpc.ServerStreamingServer[LogLine]

func _EnvRunner_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvRunnerServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvRunner_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvRunnerServer).Healthz(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvRunner_ServiceDesc is the grpc.ServiceDesc for EnvRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runner.v1.EnvRunner",
	HandlerType: (*EnvRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _EnvRunner_Run_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _EnvRunner_Healthz_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRun",
			Handler:       _EnvRunner_StreamRun_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/runner.proto",
}

const (
	StreamSupervisor_OpenStream_FullMethodName = "/runner.v1.StreamSupervisor/OpenStream"
)

// StreamSupervisorClient is the client API for StreamSupervisor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamSupervisorClient interface {
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkerToSupervisor, SupervisorToWorker], error)
}

type streamSupervisorClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamSupervisorClient(cc grpc.ClientConnInterface) StreamSupervisorClient {
	return &streamSupervisorClient{cc}
}

func (c *streamSupervisorClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkerToSupervisor, SupervisorToWorker], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamSupervisor_ServiceDesc.Streams[0], StreamSupervisor_OpenStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkerToSupervisor, SupervisorToWorker]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamSupervisor_OpenStreamClient = grpc.BidiStreamingClient[WorkerToSupervisor, SupervisorToWorker]

// StreamSupervisorServer is the server API for StreamSupervisor service.
// All implementations must embed UnimplementedStreamSupervisorServer
// for forward compatibility.
type StreamSupervisorServer interface {
	OpenStream(grpc.BidiStreamingServer[WorkerToSupervisor, SupervisorToWorker]) error
	mustEmbedUnimplementedStreamSupervisorServer()
}

// UnimplementedStreamSupervisorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamSupervisorServer struct{}

func (UnimplementedStreamSupervisorServer) OpenStream(grpc.BidiStreamingServer[WorkerToSupervisor, SupervisorToWorker]) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedStreamSupervisorServer) mustEmbedUnimplementedStreamSupervisorServer() {}
func (UnimplementedStreamSupervisorServer) testEmbeddedByValue()                          {}

// UnsafeStreamSupervisorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamSupervisorServer will
// result in compilation errors.
type UnsafeStreamSupervisorServer interface {
	mustEmbedUnimplementedStreamSupervisorServer()
}

func RegisterStreamSupervisorServer(s grpc.ServiceRegistrar, srv StreamSupervisorServer) {
	// If the following call pancis, it indicates UnimplementedStreamSupervisorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamSupervisor_ServiceDesc, srv)
}

func _StreamSupervisor_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamSupervisorServer).OpenStream(&grpc.GenericServerStream[WorkerToSupervisor, SupervisorToWorker]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamSupervisor_OpenStreamServer = grpc.BidiStreamingServer[WorkerToSupervisor, SupervisorToWorker]

// StreamSupervisor_ServiceDesc is the grpc.ServiceDesc for StreamSupervisor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamSupervisor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runner.v1.StreamSupervisor",
	HandlerType: (*StreamSupervisorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _StreamSupervisor_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/runner.proto",
}
