syntax = "proto3";

package runner.v1;

option go_package = "github.com/dspy/orchestrator/internal/pb;pb";

message ResourceHints {
  uint32 cpu_millicores = 1;
  uint64 mem_bytes = 2;
  uint32 gpu_count = 3;
  string gpu_class = 4;
}

message Mount {
  string host_path = 1;
  string mount_path = 2;
  bool read_only = 3;
}

message RunEnv {
  string oci_image = 1;
  repeated string argv = 2;
  map<string, string> env = 3;
  repeated Mount mounts = 4;
  uint64 hard_timeout_ms = 5;
  ResourceHints resources = 6;
  string content_digest = 7;
}

message TensorMeta {
  string name = 1;
  repeated int64 shape = 2;
  string dtype = 3;
}

message RunRequest {
  string job_id = 1;
  string run_id = 2;
  RunEnv env = 3;
  repeated TensorMeta inputs = 4;
}

message LogLine {
  string ts = 1;
  string level = 2;
  string msg = 3;
}

message RunResult {
  int32 exit_code = 1;
  repeated LogLine logs = 2;
  repeated TensorMeta outputs = 3;
  string cache_key = 4;
}

message Empty {}

message CreditReport {
  string worker_id = 1;
  uint32 credits = 2;
}

message WorkerHello {
  string worker_id = 1;
  uint32 max_inflight = 2;
  string version = 3;
  bool mesh_enabled = 4;
  uint64 mesh_node_id = 5;
  string mesh_domain = 6;
}

message TaskAck {
  string task_id = 1;
  bool success = 2;
  string error = 3;
}

message TaskAssignment {
  string task_id = 1;
  string tenant = 2;
  string topic = 3;
  bytes payload = 4;
  int64 offset = 5;
  string partition = 6;
}

message WorkerHeartbeat {
  string worker_id = 1;
  uint64 processed = 2;
  uint64 failed = 3;
}

message WorkerToSupervisor {
  oneof msg {
    WorkerHello hello = 1;
    CreditReport credit = 2;
    TaskAck ack = 3;
    WorkerHeartbeat heartbeat = 4;
  }
}

message SupervisorToWorker {
  oneof msg {
    TaskAssignment assignment = 1;
  }
}

service EnvRunner {
  rpc Run (RunRequest) returns (RunResult);
  rpc StreamRun (RunRequest) returns (stream LogLine);
  rpc Healthz (Empty) returns (Empty);
}

service StreamSupervisor {
  rpc OpenStream (stream WorkerToSupervisor) returns (stream SupervisorToWorker);
}
